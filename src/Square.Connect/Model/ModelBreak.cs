/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// A record of an employee&#39;s break during a shift.
    /// </summary>
    [DataContract]
    public partial class ModelBreak :  IEquatable<ModelBreak>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelBreak" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModelBreak() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelBreak" /> class.
        /// </summary>
        /// <param name="Id">UUID for this object.</param>
        /// <param name="StartAt">RFC 3339; follows same timezone info as &#x60;Shift&#x60;. Precision up to the minute is respected; seconds are truncated. (required).</param>
        /// <param name="EndAt">RFC 3339; follows same timezone info as &#x60;Shift&#x60;. Precision up to the minute is respected; seconds are truncated. The &#x60;end_at&#x60; minute is not counted when the break length is calculated. For example, a break from &#x60;00:00&#x60; to &#x60;00:11&#x60;  is considered a 10 minute break (midnight to 10 minutes after midnight)..</param>
        /// <param name="BreakTypeId">The &#x60;BreakType&#x60; this &#x60;Break&#x60; was templated on. (required).</param>
        /// <param name="Name">A human-readable name. (required).</param>
        /// <param name="ExpectedDuration">Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of the break. (required).</param>
        /// <param name="IsPaid">Whether this break counts towards time worked for compensation purposes. (required).</param>
        public ModelBreak(string Id = default(string), string StartAt = default(string), string EndAt = default(string), string BreakTypeId = default(string), string Name = default(string), string ExpectedDuration = default(string), bool? IsPaid = default(bool?))
        {
            // to ensure "StartAt" is required (not null)
            if (StartAt == null)
            {
                throw new InvalidDataException("StartAt is a required property for ModelBreak and cannot be null");
            }
            else
            {
                this.StartAt = StartAt;
            }
            // to ensure "BreakTypeId" is required (not null)
            if (BreakTypeId == null)
            {
                throw new InvalidDataException("BreakTypeId is a required property for ModelBreak and cannot be null");
            }
            else
            {
                this.BreakTypeId = BreakTypeId;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for ModelBreak and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "ExpectedDuration" is required (not null)
            if (ExpectedDuration == null)
            {
                throw new InvalidDataException("ExpectedDuration is a required property for ModelBreak and cannot be null");
            }
            else
            {
                this.ExpectedDuration = ExpectedDuration;
            }
            // to ensure "IsPaid" is required (not null)
            if (IsPaid == null)
            {
                throw new InvalidDataException("IsPaid is a required property for ModelBreak and cannot be null");
            }
            else
            {
                this.IsPaid = IsPaid;
            }
            this.Id = Id;
            this.EndAt = EndAt;
        }
        
        /// <summary>
        /// UUID for this object
        /// </summary>
        /// <value>UUID for this object</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// RFC 3339; follows same timezone info as &#x60;Shift&#x60;. Precision up to the minute is respected; seconds are truncated.
        /// </summary>
        /// <value>RFC 3339; follows same timezone info as &#x60;Shift&#x60;. Precision up to the minute is respected; seconds are truncated.</value>
        [DataMember(Name="start_at", EmitDefaultValue=false)]
        public string StartAt { get; set; }
        /// <summary>
        /// RFC 3339; follows same timezone info as &#x60;Shift&#x60;. Precision up to the minute is respected; seconds are truncated. The &#x60;end_at&#x60; minute is not counted when the break length is calculated. For example, a break from &#x60;00:00&#x60; to &#x60;00:11&#x60;  is considered a 10 minute break (midnight to 10 minutes after midnight).
        /// </summary>
        /// <value>RFC 3339; follows same timezone info as &#x60;Shift&#x60;. Precision up to the minute is respected; seconds are truncated. The &#x60;end_at&#x60; minute is not counted when the break length is calculated. For example, a break from &#x60;00:00&#x60; to &#x60;00:11&#x60;  is considered a 10 minute break (midnight to 10 minutes after midnight).</value>
        [DataMember(Name="end_at", EmitDefaultValue=false)]
        public string EndAt { get; set; }
        /// <summary>
        /// The &#x60;BreakType&#x60; this &#x60;Break&#x60; was templated on.
        /// </summary>
        /// <value>The &#x60;BreakType&#x60; this &#x60;Break&#x60; was templated on.</value>
        [DataMember(Name="break_type_id", EmitDefaultValue=false)]
        public string BreakTypeId { get; set; }
        /// <summary>
        /// A human-readable name.
        /// </summary>
        /// <value>A human-readable name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of the break.
        /// </summary>
        /// <value>Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of the break.</value>
        [DataMember(Name="expected_duration", EmitDefaultValue=false)]
        public string ExpectedDuration { get; set; }
        /// <summary>
        /// Whether this break counts towards time worked for compensation purposes.
        /// </summary>
        /// <value>Whether this break counts towards time worked for compensation purposes.</value>
        [DataMember(Name="is_paid", EmitDefaultValue=false)]
        public bool? IsPaid { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelBreak {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StartAt: ").Append(StartAt).Append("\n");
            sb.Append("  EndAt: ").Append(EndAt).Append("\n");
            sb.Append("  BreakTypeId: ").Append(BreakTypeId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ExpectedDuration: ").Append(ExpectedDuration).Append("\n");
            sb.Append("  IsPaid: ").Append(IsPaid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ModelBreak);
        }

        /// <summary>
        /// Returns true if ModelBreak instances are equal
        /// </summary>
        /// <param name="other">Instance of ModelBreak to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelBreak other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.StartAt == other.StartAt ||
                    this.StartAt != null &&
                    this.StartAt.Equals(other.StartAt)
                ) && 
                (
                    this.EndAt == other.EndAt ||
                    this.EndAt != null &&
                    this.EndAt.Equals(other.EndAt)
                ) && 
                (
                    this.BreakTypeId == other.BreakTypeId ||
                    this.BreakTypeId != null &&
                    this.BreakTypeId.Equals(other.BreakTypeId)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.ExpectedDuration == other.ExpectedDuration ||
                    this.ExpectedDuration != null &&
                    this.ExpectedDuration.Equals(other.ExpectedDuration)
                ) && 
                (
                    this.IsPaid == other.IsPaid ||
                    this.IsPaid != null &&
                    this.IsPaid.Equals(other.IsPaid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.StartAt != null)
                    hash = hash * 59 + this.StartAt.GetHashCode();
                if (this.EndAt != null)
                    hash = hash * 59 + this.EndAt.GetHashCode();
                if (this.BreakTypeId != null)
                    hash = hash * 59 + this.BreakTypeId.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.ExpectedDuration != null)
                    hash = hash * 59 + this.ExpectedDuration.GetHashCode();
                if (this.IsPaid != null)
                    hash = hash * 59 + this.IsPaid.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // StartAt (string) minLength
            if(this.StartAt != null && this.StartAt.Length < 1)
            {
                yield return new ValidationResult("Invalid value for StartAt, length must be greater than 1.", new [] { "StartAt" });
            }

            // BreakTypeId (string) minLength
            if(this.BreakTypeId != null && this.BreakTypeId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for BreakTypeId, length must be greater than 1.", new [] { "BreakTypeId" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // ExpectedDuration (string) minLength
            if(this.ExpectedDuration != null && this.ExpectedDuration.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ExpectedDuration, length must be greater than 1.", new [] { "ExpectedDuration" });
            }

            yield break;
        }
    }

}
