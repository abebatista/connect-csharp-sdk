/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// A request to create a new &#x60;BreakType&#x60;
    /// </summary>
    [DataContract]
    public partial class CreateBreakTypeRequest :  IEquatable<CreateBreakTypeRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBreakTypeRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateBreakTypeRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBreakTypeRequest" /> class.
        /// </summary>
        /// <param name="IdempotencyKey">Unique string value to insure idempotency of the operation.</param>
        /// <param name="BreakType">The &#x60;BreakType&#x60; to be created. (required).</param>
        public CreateBreakTypeRequest(string IdempotencyKey = default(string), BreakType BreakType = default(BreakType))
        {
            // to ensure "BreakType" is required (not null)
            if (BreakType == null)
            {
                throw new InvalidDataException("BreakType is a required property for CreateBreakTypeRequest and cannot be null");
            }
            else
            {
                this.BreakType = BreakType;
            }
            this.IdempotencyKey = IdempotencyKey;
        }
        
        /// <summary>
        /// Unique string value to insure idempotency of the operation
        /// </summary>
        /// <value>Unique string value to insure idempotency of the operation</value>
        [DataMember(Name="idempotency_key", EmitDefaultValue=false)]
        public string IdempotencyKey { get; set; }
        /// <summary>
        /// The &#x60;BreakType&#x60; to be created.
        /// </summary>
        /// <value>The &#x60;BreakType&#x60; to be created.</value>
        [DataMember(Name="break_type", EmitDefaultValue=false)]
        public BreakType BreakType { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateBreakTypeRequest {\n");
            sb.Append("  IdempotencyKey: ").Append(IdempotencyKey).Append("\n");
            sb.Append("  BreakType: ").Append(BreakType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateBreakTypeRequest);
        }

        /// <summary>
        /// Returns true if CreateBreakTypeRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateBreakTypeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateBreakTypeRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.IdempotencyKey == other.IdempotencyKey ||
                    this.IdempotencyKey != null &&
                    this.IdempotencyKey.Equals(other.IdempotencyKey)
                ) && 
                (
                    this.BreakType == other.BreakType ||
                    this.BreakType != null &&
                    this.BreakType.Equals(other.BreakType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.IdempotencyKey != null)
                    hash = hash * 59 + this.IdempotencyKey.GetHashCode();
                if (this.BreakType != null)
                    hash = hash * 59 + this.BreakType.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // IdempotencyKey (string) maxLength
            if(this.IdempotencyKey != null && this.IdempotencyKey.Length > 128)
            {
                yield return new ValidationResult("Invalid value for IdempotencyKey, length must be less than 128.", new [] { "IdempotencyKey" });
            }

            yield break;
        }
    }

}
