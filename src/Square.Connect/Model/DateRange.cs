/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// A range defined by two dates. Used for filtering a query for Connect v2  objects that have date properties.
    /// </summary>
    [DataContract]
    public partial class DateRange :  IEquatable<DateRange>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DateRange" /> class.
        /// </summary>
        /// <param name="StartDate">String in &#x60;YYYY-MM-DD&#x60; format, e.g. &#x60;2017-10-31&#x60; per the ISO 8601 extended format for calendar dates. The beginning of a date range (inclusive).</param>
        /// <param name="EndDate">String in &#x60;YYYY-MM-DD&#x60; format, e.g. &#x60;2017-10-31&#x60; per the ISO 8601 extended format for calendar dates. The end of a date range (inclusive).</param>
        public DateRange(string StartDate = default(string), string EndDate = default(string))
        {
            this.StartDate = StartDate;
            this.EndDate = EndDate;
        }
        
        /// <summary>
        /// String in &#x60;YYYY-MM-DD&#x60; format, e.g. &#x60;2017-10-31&#x60; per the ISO 8601 extended format for calendar dates. The beginning of a date range (inclusive)
        /// </summary>
        /// <value>String in &#x60;YYYY-MM-DD&#x60; format, e.g. &#x60;2017-10-31&#x60; per the ISO 8601 extended format for calendar dates. The beginning of a date range (inclusive)</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public string StartDate { get; set; }
        /// <summary>
        /// String in &#x60;YYYY-MM-DD&#x60; format, e.g. &#x60;2017-10-31&#x60; per the ISO 8601 extended format for calendar dates. The end of a date range (inclusive)
        /// </summary>
        /// <value>String in &#x60;YYYY-MM-DD&#x60; format, e.g. &#x60;2017-10-31&#x60; per the ISO 8601 extended format for calendar dates. The end of a date range (inclusive)</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public string EndDate { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DateRange {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DateRange);
        }

        /// <summary>
        /// Returns true if DateRange instances are equal
        /// </summary>
        /// <param name="other">Instance of DateRange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DateRange other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.StartDate == other.StartDate ||
                    this.StartDate != null &&
                    this.StartDate.Equals(other.StartDate)
                ) && 
                (
                    this.EndDate == other.EndDate ||
                    this.EndDate != null &&
                    this.EndDate.Equals(other.EndDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.StartDate != null)
                    hash = hash * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hash = hash * 59 + this.EndDate.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
