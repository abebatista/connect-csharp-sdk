/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Square.Connect.Client;
using Square.Connect.Api;
using Square.Connect.Model;

namespace Square.Connect.Test
{
    /// <summary>
    ///  Class for testing LaborApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class LaborApiTests
    {
        private LaborApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new LaborApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of LaborApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' LaborApi
            //Assert.IsInstanceOfType(typeof(LaborApi), instance, "instance is a LaborApi");
        }

        
        /// <summary>
        /// Test CreateBreakType
        /// </summary>
        [Test]
        public void CreateBreakTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateBreakTypeRequest body = null;
            //var response = instance.CreateBreakType(body);
            //Assert.IsInstanceOf<CreateBreakTypeResponse> (response, "response is CreateBreakTypeResponse");
        }
        
        /// <summary>
        /// Test CreateShift
        /// </summary>
        [Test]
        public void CreateShiftTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateShiftRequest body = null;
            //var response = instance.CreateShift(body);
            //Assert.IsInstanceOf<CreateShiftResponse> (response, "response is CreateShiftResponse");
        }
        
        /// <summary>
        /// Test DeleteBreakType
        /// </summary>
        [Test]
        public void DeleteBreakTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DeleteBreakType(id);
            //Assert.IsInstanceOf<DeleteBreakTypeResponse> (response, "response is DeleteBreakTypeResponse");
        }
        
        /// <summary>
        /// Test DeleteShift
        /// </summary>
        [Test]
        public void DeleteShiftTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DeleteShift(id);
            //Assert.IsInstanceOf<DeleteShiftResponse> (response, "response is DeleteShiftResponse");
        }
        
        /// <summary>
        /// Test GetBreakType
        /// </summary>
        [Test]
        public void GetBreakTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetBreakType(id);
            //Assert.IsInstanceOf<GetBreakTypeResponse> (response, "response is GetBreakTypeResponse");
        }
        
        /// <summary>
        /// Test GetEmployeeWage
        /// </summary>
        [Test]
        public void GetEmployeeWageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetEmployeeWage(id);
            //Assert.IsInstanceOf<GetEmployeeWageResponse> (response, "response is GetEmployeeWageResponse");
        }
        
        /// <summary>
        /// Test GetShift
        /// </summary>
        [Test]
        public void GetShiftTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetShift(id);
            //Assert.IsInstanceOf<GetShiftResponse> (response, "response is GetShiftResponse");
        }
        
        /// <summary>
        /// Test ListBreakTypes
        /// </summary>
        [Test]
        public void ListBreakTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string locationId = null;
            //int? limit = null;
            //string cursor = null;
            //var response = instance.ListBreakTypes(locationId, limit, cursor);
            //Assert.IsInstanceOf<ListBreakTypesResponse> (response, "response is ListBreakTypesResponse");
        }
        
        /// <summary>
        /// Test ListEmployeeWages
        /// </summary>
        [Test]
        public void ListEmployeeWagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string employeeId = null;
            //int? limit = null;
            //string cursor = null;
            //var response = instance.ListEmployeeWages(employeeId, limit, cursor);
            //Assert.IsInstanceOf<ListEmployeeWagesResponse> (response, "response is ListEmployeeWagesResponse");
        }
        
        /// <summary>
        /// Test ListWorkweekConfigs
        /// </summary>
        [Test]
        public void ListWorkweekConfigsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string cursor = null;
            //var response = instance.ListWorkweekConfigs(limit, cursor);
            //Assert.IsInstanceOf<ListWorkweekConfigsResponse> (response, "response is ListWorkweekConfigsResponse");
        }
        
        /// <summary>
        /// Test SearchShifts
        /// </summary>
        [Test]
        public void SearchShiftsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SearchShiftsRequest body = null;
            //var response = instance.SearchShifts(body);
            //Assert.IsInstanceOf<SearchShiftsResponse> (response, "response is SearchShiftsResponse");
        }
        
        /// <summary>
        /// Test UpdateBreakType
        /// </summary>
        [Test]
        public void UpdateBreakTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UpdateBreakTypeRequest body = null;
            //var response = instance.UpdateBreakType(id, body);
            //Assert.IsInstanceOf<UpdateBreakTypeResponse> (response, "response is UpdateBreakTypeResponse");
        }
        
        /// <summary>
        /// Test UpdateShift
        /// </summary>
        [Test]
        public void UpdateShiftTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UpdateShiftRequest body = null;
            //var response = instance.UpdateShift(id, body);
            //Assert.IsInstanceOf<UpdateShiftResponse> (response, "response is UpdateShiftResponse");
        }
        
        /// <summary>
        /// Test UpdateWorkweekConfig
        /// </summary>
        [Test]
        public void UpdateWorkweekConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UpdateWorkweekConfigRequest body = null;
            //var response = instance.UpdateWorkweekConfig(id, body);
            //Assert.IsInstanceOf<UpdateWorkweekConfigResponse> (response, "response is UpdateWorkweekConfigResponse");
        }
        
    }

}
